{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"about/","text":"","title":"Our Oracle"},{"location":"chainlink-adapters/XML-to-JSON-cl-adaptor/","text":"XML to JSON CL Adaptor This adaptor allows for converting of XML API's into JSON. This allows ChainLink nodes to use API's which use XML as a markup. It's built in Go using go-json-rest . Dependencies To be able to run this external adaptor, you need Docker installed. Run the Adaptor This adaptor is published on the public docker hub, so you just need to run the two following commands: docker pull linkpoolio/xml-cl-ea docker run -t -p 8080:8080 linkpoolio/xml-cl-ea Using the Adaptor To ensure that the adaptor is working properly, the following call: http://localhost:8080/xmltojson?endpoint=http://webservices.nextbus.com/service/publicXMLFeed?command=agencyList Should result in something similar to the following: { \"body\": { \"-copyright\": \"All data copyright agencies listed below and NextBus Inc 2018.\", \"agency\": [ { \"-tag\": \"string\", \"-title\": \"string\", \"-shortTitle\": \"string\", \"-regionTitle\": \"string\" } ] } } Development To run the external adaptor, clone the repo and run the following commands: go get To run the unit tests, run the following: go test Contributions Any contributions are welcome. Created by the LinkPool Team","title":"XML to JSON CL Adaptor"},{"location":"chainlink-adapters/XML-to-JSON-cl-adaptor/#xml-to-json-cl-adaptor","text":"This adaptor allows for converting of XML API's into JSON. This allows ChainLink nodes to use API's which use XML as a markup. It's built in Go using go-json-rest .","title":"XML to JSON CL Adaptor"},{"location":"chainlink-adapters/XML-to-JSON-cl-adaptor/#dependencies","text":"To be able to run this external adaptor, you need Docker installed.","title":"Dependencies"},{"location":"chainlink-adapters/XML-to-JSON-cl-adaptor/#run-the-adaptor","text":"This adaptor is published on the public docker hub, so you just need to run the two following commands: docker pull linkpoolio/xml-cl-ea docker run -t -p 8080:8080 linkpoolio/xml-cl-ea","title":"Run the Adaptor"},{"location":"chainlink-adapters/XML-to-JSON-cl-adaptor/#using-the-adaptor","text":"To ensure that the adaptor is working properly, the following call: http://localhost:8080/xmltojson?endpoint=http://webservices.nextbus.com/service/publicXMLFeed?command=agencyList Should result in something similar to the following: { \"body\": { \"-copyright\": \"All data copyright agencies listed below and NextBus Inc 2018.\", \"agency\": [ { \"-tag\": \"string\", \"-title\": \"string\", \"-shortTitle\": \"string\", \"-regionTitle\": \"string\" } ] } }","title":"Using the Adaptor"},{"location":"chainlink-adapters/XML-to-JSON-cl-adaptor/#development","text":"To run the external adaptor, clone the repo and run the following commands: go get To run the unit tests, run the following: go test","title":"Development"},{"location":"chainlink-adapters/XML-to-JSON-cl-adaptor/#contributions","text":"Any contributions are welcome. Created by the LinkPool Team","title":"Contributions"},{"location":"chainlink-adapters/alpha-vantage/","text":"Alpha Vantage External Adapter External Adapter for Chainlink to query Alpha Vantages' APIs. Built with Bridges . https://www.alphavantage.co/documentation/ To give Alpha Vantages own description: Composed of a tight-knit community of researchers, engineers, and business professionals, Alpha Vantage Inc. is a leading provider of free APIs for realtime and historical data on stocks, forex (FX), and digital/crypto currencies. Our success is driven by rigorous research, cutting edge technology, and a disciplined focus on democratizing access to data. Contract Usage To use this adapter on-chain, find a node that supports this adapter and build your request like so: Chainlink.Request memory req = buildChainlinkRequest(jobId, this, this.fulfill.selector); run.add(\"function\", \"GLOBAL_QUOTE\"); run.add(\"symbol\", \"MSFT\"); string[] memory copyPath = new string[](2); copyPath[0] = \"Global Quote\"; copyPath[1] = \"05. price\"; Setup Instructions Local Install Make sure Golang is installed. Build: make build Then run the adapter: API_KEY=apikey ./alphavantage-adapter Docker To run the container: docker run -it -e API_KEY=apikey -p 8080:8080 linkpool/alphavantage-adapter Container also supports passing in CLI arguments. You can add and modify the keys to match what's specified in the API documentation. Usage curl -X POST -H 'Content-Type: application/json' \\ -d @- << EOF { \"jobRunId\": \"1234\", \"data\": { \"function\": \"GLOBAL_QUOTE\", \"symbol\": \"MSFT\" } } EOF Response: { \"jobRunId\": \"1234\", \"status\": \"completed\", \"error\": null, \"pending\": false, \"data\": { \"Global Quote\": { \"01. symbol\": \"MSFT\", \"02. open\": \"133.7900\", \"03. high\": \"135.6500\", \"04. low\": \"131.8284\", \"05. price\": \"135.2800\", \"06. volume\": \"26682074\", \"07. latest trading day\": \"2019-08-07\", \"08. previous close\": \"134.6900\", \"09. change\": \"0.5900\", \"10. change percent\": \"0.4380%\" }, \"function\": \"GLOBAL_QUOTE\", \"symbol\": \"MSFT\" } }","title":"Alpha Vantage"},{"location":"chainlink-adapters/alpha-vantage/#alpha-vantage-external-adapter","text":"External Adapter for Chainlink to query Alpha Vantages' APIs. Built with Bridges . https://www.alphavantage.co/documentation/ To give Alpha Vantages own description: Composed of a tight-knit community of researchers, engineers, and business professionals, Alpha Vantage Inc. is a leading provider of free APIs for realtime and historical data on stocks, forex (FX), and digital/crypto currencies. Our success is driven by rigorous research, cutting edge technology, and a disciplined focus on democratizing access to data.","title":"Alpha Vantage External Adapter"},{"location":"chainlink-adapters/alpha-vantage/#contract-usage","text":"To use this adapter on-chain, find a node that supports this adapter and build your request like so: Chainlink.Request memory req = buildChainlinkRequest(jobId, this, this.fulfill.selector); run.add(\"function\", \"GLOBAL_QUOTE\"); run.add(\"symbol\", \"MSFT\"); string[] memory copyPath = new string[](2); copyPath[0] = \"Global Quote\"; copyPath[1] = \"05. price\";","title":"Contract Usage"},{"location":"chainlink-adapters/alpha-vantage/#setup-instructions","text":"","title":"Setup Instructions"},{"location":"chainlink-adapters/alpha-vantage/#local-install","text":"Make sure Golang is installed. Build: make build Then run the adapter: API_KEY=apikey ./alphavantage-adapter","title":"Local Install"},{"location":"chainlink-adapters/alpha-vantage/#docker","text":"To run the container: docker run -it -e API_KEY=apikey -p 8080:8080 linkpool/alphavantage-adapter Container also supports passing in CLI arguments. You can add and modify the keys to match what's specified in the API documentation.","title":"Docker"},{"location":"chainlink-adapters/alpha-vantage/#usage","text":"curl -X POST -H 'Content-Type: application/json' \\ -d @- << EOF { \"jobRunId\": \"1234\", \"data\": { \"function\": \"GLOBAL_QUOTE\", \"symbol\": \"MSFT\" } } EOF Response: { \"jobRunId\": \"1234\", \"status\": \"completed\", \"error\": null, \"pending\": false, \"data\": { \"Global Quote\": { \"01. symbol\": \"MSFT\", \"02. open\": \"133.7900\", \"03. high\": \"135.6500\", \"04. low\": \"131.8284\", \"05. price\": \"135.2800\", \"06. volume\": \"26682074\", \"07. latest trading day\": \"2019-08-07\", \"08. previous close\": \"134.6900\", \"09. change\": \"0.5900\", \"10. change percent\": \"0.4380%\" }, \"function\": \"GLOBAL_QUOTE\", \"symbol\": \"MSFT\" } }","title":"Usage"},{"location":"chainlink-adapters/asset-price-external-adaptor/","text":"Asset Price External Adaptor External Adaptor for Chainlink which aggregates prices of crypto assets from multiple exchanges based on a weighted average of their volume. This adaptor is built using the bridges framework: https://github.com/linkpoolio/bridges Currently Supported Exchanges: Binance Bitfinex Bitstamp (Highly rate limited) Bittrex Coinall Coinbase Pro COSS HitBTC Huobi Pro Kraken Gemini ZB Setup Instructions Local Install Make sure Golang is installed. Build: make build Then run the adaptor: ./asset-price-cl-ea -p <port> -t <tickerInterval> Arguments Char Default Usage p 8080 Port number to serve t 1m0s Ticker interval for the adaptor to refresh supported trading pairs, suggested units: s, m, h Docker To run the container: docker run -it -p 8080:8080 -e PORT=8080 linkpoolio/asset-price-cl-ea Container also supports passing in CLI arguments. AWS Lambda Build the executable: bash GO111MODULE=on go build -o asset-price Add the file to a ZIP archive: bash zip asset-price.zip ./asset-price Upload the the zip file into AWS and then use asset-price as the handler. Set the LAMBDA environment variable to true in AWS for the adaptor to be compatible with Lambda. GCP Functions Change into the app directory: bash cd app Deploy into GCP bash gcloud functions deploy asset-price --runtime go111 --entry-point Handler --trigger-http Usage To call the API, you need to send a POST request to http://localhost:<port>/price with the request body being of the ChainLink RunResult type. For example: curl -X POST -H 'Content-Type: application/json' -d '{ \"jobRunId\": \"1234\", \"data\": { \"base\": \"BTC\", \"quote\": \"USD\" }}' http://localhost:8080/price Should return something similar to: { \"jobRunId\": \"1234\", \"data\": { \"base\": \"BTC\", \"quote\": \"USD\", \"id\": \"BTC-USD\", \"price\": \"3836.4042305857843\", \"volume\": \"131747894.87525243\", \"usdPrice\": \"3836.4042305857843\", \"exchanges\": [ \"HitBTC\", \"Bitfinex\", \"Coinbase\", \"COSS\" ], \"warnings\": null }, \"status\": \"\", \"error\": null, \"pending\": false } Or: curl -X POST -H 'Content-Type: application/json' -d '{ \"jobRunId\": \"1234\", \"data\": { \"base\": \"LINK\", \"quote\": \"ETH\" }}' http://localhost:8080/price { \"jobRunId\": \"1234\", \"data\": { \"base\": \"LINK\", \"quote\": \"ETH\", \"id\": \"LINK-ETH\", \"price\": \"0.0031786459052877327\", \"volume\": \"797.6642187877999\", \"usdPrice\": \"0.43956635389465454\", \"exchanges\": [ \"Binance\", \"Huobi\", \"COSS\" ], \"warnings\": null }, \"status\": \"\", \"error\": null, \"pending\": false } ChainLink Node Setup To integrate this adaptor with your node, follow the official documentation: https://docs.chain.link/docs/node-operators Solidity Usage To use this adaptor on-chain, you can create the following Chainlink request: Chainlink.Request memory req = buildChainlinkRequest(jobId, this, this.fulfill.selector); req.add(\"base\", \"LINK\"); req.add(\"quote\", \"BTC\"); req.add(\"copyPath\", \"price\"); req.addInt(\"times\", 100000000); Allowing you to change base and quote to any trading pair. Contribution We welcome any contributors. The more exchanges supported, the better. Feel free to raise any PR's or issues.","title":"Asset Price External Adaptor"},{"location":"chainlink-adapters/asset-price-external-adaptor/#asset-price-external-adaptor","text":"External Adaptor for Chainlink which aggregates prices of crypto assets from multiple exchanges based on a weighted average of their volume. This adaptor is built using the bridges framework: https://github.com/linkpoolio/bridges","title":"Asset Price External Adaptor"},{"location":"chainlink-adapters/asset-price-external-adaptor/#currently-supported-exchanges","text":"Binance Bitfinex Bitstamp (Highly rate limited) Bittrex Coinall Coinbase Pro COSS HitBTC Huobi Pro Kraken Gemini ZB","title":"Currently Supported Exchanges:"},{"location":"chainlink-adapters/asset-price-external-adaptor/#setup-instructions","text":"","title":"Setup Instructions"},{"location":"chainlink-adapters/asset-price-external-adaptor/#local-install","text":"Make sure Golang is installed. Build: make build Then run the adaptor: ./asset-price-cl-ea -p <port> -t <tickerInterval>","title":"Local Install"},{"location":"chainlink-adapters/asset-price-external-adaptor/#arguments","text":"Char Default Usage p 8080 Port number to serve t 1m0s Ticker interval for the adaptor to refresh supported trading pairs, suggested units: s, m, h","title":"Arguments"},{"location":"chainlink-adapters/asset-price-external-adaptor/#docker","text":"To run the container: docker run -it -p 8080:8080 -e PORT=8080 linkpoolio/asset-price-cl-ea Container also supports passing in CLI arguments.","title":"Docker"},{"location":"chainlink-adapters/asset-price-external-adaptor/#aws-lambda","text":"Build the executable: bash GO111MODULE=on go build -o asset-price Add the file to a ZIP archive: bash zip asset-price.zip ./asset-price Upload the the zip file into AWS and then use asset-price as the handler. Set the LAMBDA environment variable to true in AWS for the adaptor to be compatible with Lambda.","title":"AWS Lambda"},{"location":"chainlink-adapters/asset-price-external-adaptor/#gcp-functions","text":"Change into the app directory: bash cd app Deploy into GCP bash gcloud functions deploy asset-price --runtime go111 --entry-point Handler --trigger-http","title":"GCP Functions"},{"location":"chainlink-adapters/asset-price-external-adaptor/#usage","text":"To call the API, you need to send a POST request to http://localhost:<port>/price with the request body being of the ChainLink RunResult type. For example: curl -X POST -H 'Content-Type: application/json' -d '{ \"jobRunId\": \"1234\", \"data\": { \"base\": \"BTC\", \"quote\": \"USD\" }}' http://localhost:8080/price Should return something similar to: { \"jobRunId\": \"1234\", \"data\": { \"base\": \"BTC\", \"quote\": \"USD\", \"id\": \"BTC-USD\", \"price\": \"3836.4042305857843\", \"volume\": \"131747894.87525243\", \"usdPrice\": \"3836.4042305857843\", \"exchanges\": [ \"HitBTC\", \"Bitfinex\", \"Coinbase\", \"COSS\" ], \"warnings\": null }, \"status\": \"\", \"error\": null, \"pending\": false } Or: curl -X POST -H 'Content-Type: application/json' -d '{ \"jobRunId\": \"1234\", \"data\": { \"base\": \"LINK\", \"quote\": \"ETH\" }}' http://localhost:8080/price { \"jobRunId\": \"1234\", \"data\": { \"base\": \"LINK\", \"quote\": \"ETH\", \"id\": \"LINK-ETH\", \"price\": \"0.0031786459052877327\", \"volume\": \"797.6642187877999\", \"usdPrice\": \"0.43956635389465454\", \"exchanges\": [ \"Binance\", \"Huobi\", \"COSS\" ], \"warnings\": null }, \"status\": \"\", \"error\": null, \"pending\": false }","title":"Usage"},{"location":"chainlink-adapters/asset-price-external-adaptor/#chainlink-node-setup","text":"To integrate this adaptor with your node, follow the official documentation: https://docs.chain.link/docs/node-operators","title":"ChainLink Node Setup"},{"location":"chainlink-adapters/asset-price-external-adaptor/#solidity-usage","text":"To use this adaptor on-chain, you can create the following Chainlink request: Chainlink.Request memory req = buildChainlinkRequest(jobId, this, this.fulfill.selector); req.add(\"base\", \"LINK\"); req.add(\"quote\", \"BTC\"); req.add(\"copyPath\", \"price\"); req.addInt(\"times\", 100000000); Allowing you to change base and quote to any trading pair.","title":"Solidity Usage"},{"location":"chainlink-adapters/asset-price-external-adaptor/#contribution","text":"We welcome any contributors. The more exchanges supported, the better. Feel free to raise any PR's or issues.","title":"Contribution"},{"location":"chainlink-adapters/chainlink-external-adapter-for-writing-to-ethereum-based-blockchains/","text":"Chainlink External Adapter for writing to Ethereum-based Blockchains This external adapter allows you to configure an endpoint and private key to sign and send transactions to external Ethereum-based blockchains. A typical workflow of a Chainlink job for this external adapter could look like: - Retrieve a piece of data from some data source - Parse the desired field from that data source's response - Utilize this adapter to write the value to ChainB - Parse the transaction object from ChainB for the transaction hash - Write the transaction hash from ChainB to ChainA Install npm install Deploy & Test Run ganache-cli or some local blockchain with RPC enabled Set local environment variable URL to the RPC endpoint for that client. For example http://localhost:8545 Set the local environment variable PRIVATE_KEY to the private key of a funded wallet. For example 0xde1673a55d14576f10f5223efbe6b1df771409eb3d51d24d3fb0e04bd615a619 (Ganache's default) Run: node deploy_contract.js The output should include a deployed contract address Set the local environment variable CONTRACT_ADDRESS to that address Run: npm test Verify the contract was written Run: node read_contract.js Create the zip zip -r cl-ethtx.zip . Install to AWS Lambda In Lambda Functions, create function On the Create function page: Give the function a name Use Node.js 8.10 for the runtime Choose an existing role or create a new one Click Create Function Under Function code, select \"Upload a .zip file\" from the Code entry type drop-down Click Upload and select the cl-ethtx.zip file Handler should remain index.handler Add the environment variable: Key: URL Value: RPC_Endpoint_To_Connect Key: PRIVATE_KEY Value: Your_Private_key Save Install to GCP In Functions, create a new function, choose to ZIP upload Click Browse and select the cl-ethtx.zip file Select a Storage Bucket to keep the zip in Function to execute: gcpservice Click More, Add variable NAME: URL VALUE: RPC_Endpoint_To_Connect NAME: PRIVATE_KEY VALUE: Your_Private_key","title":"Chainlink External Adapter for writing to Ethereum-based Blockchains"},{"location":"chainlink-adapters/chainlink-external-adapter-for-writing-to-ethereum-based-blockchains/#chainlink-external-adapter-for-writing-to-ethereum-based-blockchains","text":"This external adapter allows you to configure an endpoint and private key to sign and send transactions to external Ethereum-based blockchains. A typical workflow of a Chainlink job for this external adapter could look like: - Retrieve a piece of data from some data source - Parse the desired field from that data source's response - Utilize this adapter to write the value to ChainB - Parse the transaction object from ChainB for the transaction hash - Write the transaction hash from ChainB to ChainA","title":"Chainlink External Adapter for writing to Ethereum-based Blockchains"},{"location":"chainlink-adapters/chainlink-external-adapter-for-writing-to-ethereum-based-blockchains/#install","text":"npm install","title":"Install"},{"location":"chainlink-adapters/chainlink-external-adapter-for-writing-to-ethereum-based-blockchains/#deploy-test","text":"Run ganache-cli or some local blockchain with RPC enabled Set local environment variable URL to the RPC endpoint for that client. For example http://localhost:8545 Set the local environment variable PRIVATE_KEY to the private key of a funded wallet. For example 0xde1673a55d14576f10f5223efbe6b1df771409eb3d51d24d3fb0e04bd615a619 (Ganache's default) Run: node deploy_contract.js The output should include a deployed contract address Set the local environment variable CONTRACT_ADDRESS to that address Run: npm test Verify the contract was written Run: node read_contract.js","title":"Deploy &amp; Test"},{"location":"chainlink-adapters/chainlink-external-adapter-for-writing-to-ethereum-based-blockchains/#create-the-zip","text":"zip -r cl-ethtx.zip .","title":"Create the zip"},{"location":"chainlink-adapters/chainlink-external-adapter-for-writing-to-ethereum-based-blockchains/#install-to-aws-lambda","text":"In Lambda Functions, create function On the Create function page: Give the function a name Use Node.js 8.10 for the runtime Choose an existing role or create a new one Click Create Function Under Function code, select \"Upload a .zip file\" from the Code entry type drop-down Click Upload and select the cl-ethtx.zip file Handler should remain index.handler Add the environment variable: Key: URL Value: RPC_Endpoint_To_Connect Key: PRIVATE_KEY Value: Your_Private_key Save","title":"Install to AWS Lambda"},{"location":"chainlink-adapters/chainlink-external-adapter-for-writing-to-ethereum-based-blockchains/#install-to-gcp","text":"In Functions, create a new function, choose to ZIP upload Click Browse and select the cl-ethtx.zip file Select a Storage Bucket to keep the zip in Function to execute: gcpservice Click More, Add variable NAME: URL VALUE: RPC_Endpoint_To_Connect NAME: PRIVATE_KEY VALUE: Your_Private_key","title":"Install to GCP"},{"location":"chainlink-adapters/coinAPI.io-python-3.x-external-adapter/","text":"CoinAPI.io Python 3.x External Adapter for Chainlink Adapter Formats : Google Cloud Function, AWS Lambda and Docker Supported Endpoints : exchanges, assets, symbols, exchangerate, ohlcv, trades, quotes Unsupported Endpoints : subscriptions API Mapping : A path parameter has been introduced to specify historical/current/latest/ for certain endpoints Cloud Installation: Make the bash script executable chmod +x ./create_zip.bsh Create the adapter zip for your cloud provider ( gcs or aws ) ./create_zip.bsh aws Upload the created zip to your provider and set the appropriate handler ( gcs_handler or aws_handler ) to be triggered by a HTTP event. Create an API_KEY environment variable and set it to your CoinAPI.io api key Docker Installation: Build the image docker build -t coinapi-cl-ea . Run the container while passing in your API_KEY docker run -e API_KEY=XXXXXXXX-XXXX-XXX-XXXX-XXXXXXXXXXX -p 5000:5000 coinapi-cl-ea The adapter endpoint will be accessable from http://localhost/:5000/coinapi-cl-ea Sample Job Spec Chainlink normalises all api parameters to camelcase ( eg assetIdBase will map to asset_id_base in the actual api query) { \"initiators\": [ { \"type\": \"web\", \"params\": { } } ], \"tasks\": [ { \"type\": \"coinapi-cl-ea-docker\", \"confirmations\": 0, \"params\": { \"endpoint\": \"exchangerate\", \"assetIdBase\": \"BTC\", \"assetIdQuote\": \"USD\" } } ], \"startAt\": null, \"endAt\": null Sample Job Spec Result { \"id\": \"ceda5ccb18ee4effacacff3a451cfdd3\", \"jobId\": \"c0b6ebcf849b4ca7b7e14c3cc682bf27\", \"result\": { \"jobRunId\": \"ceda5ccb18ee4effacacff3a451cfdd3\", \"data\": { \"assetIdBase\": \"BTC\", \"assetIdQuote\": \"USD\", \"endpoint\": \"exchangerate\", \"rate\": 3440.9833656611113, \"time\": \"2018-12-10T21:48:03.9455953Z\" }, \"status\": \"completed\", \"error\": null }, \"status\": \"completed\", \"taskRuns\": [ { \"id\": \"33ac1506792640579034f6d770b89221\", \"result\": { \"jobRunId\": \"ceda5ccb18ee4effacacff3a451cfdd3\", \"data\": { \"assetIdBase\": \"BTC\", \"assetIdQuote\": \"USD\", \"endpoint\": \"exchangerate\", \"rate\": 3440.9833656611113, \"time\": \"2018-12-10T21:48:03.9455953Z\" }, \"status\": \"completed\", \"error\": null }, \"status\": \"completed\", \"task\": { \"type\": \"coinapi-cl-ea-docker\", \"confirmations\": 0, \"params\": { \"assetIdBase\": \"BTC\", \"assetIdQuote\": \"USD\", \"endpoint\": \"exchangerate\" } }, \"minimumConfirmations\": 0 } ], \"createdAt\": \"2018-12-10T21:48:03.822052017Z\", \"completedAt\": \"2018-12-10T21:48:03.97080798Z\", \"creationHeight\": null, \"observedHeight\": null, \"overrides\": { \"jobRunId\": \"\", \"data\": { }, \"status\": \"\", \"error\": null }, \"initiator\": { \"type\": \"web\", \"params\": { Other Examples test_data.json contains example payloads for all supported endpoints, paths and their parameters. Full documentation for CoinAPI.io API can be found here","title":"CoinAPI.io Python 3.x External Adapter"},{"location":"chainlink-adapters/coinAPI.io-python-3.x-external-adapter/#coinapiio-python-3x-external-adapter-for-chainlink","text":"Adapter Formats : Google Cloud Function, AWS Lambda and Docker Supported Endpoints : exchanges, assets, symbols, exchangerate, ohlcv, trades, quotes Unsupported Endpoints : subscriptions API Mapping : A path parameter has been introduced to specify historical/current/latest/ for certain endpoints","title":"CoinAPI.io Python 3.x External Adapter for Chainlink"},{"location":"chainlink-adapters/coinAPI.io-python-3.x-external-adapter/#cloud-installation","text":"Make the bash script executable chmod +x ./create_zip.bsh Create the adapter zip for your cloud provider ( gcs or aws ) ./create_zip.bsh aws Upload the created zip to your provider and set the appropriate handler ( gcs_handler or aws_handler ) to be triggered by a HTTP event. Create an API_KEY environment variable and set it to your CoinAPI.io api key","title":"Cloud Installation:"},{"location":"chainlink-adapters/coinAPI.io-python-3.x-external-adapter/#docker-installation","text":"Build the image docker build -t coinapi-cl-ea . Run the container while passing in your API_KEY docker run -e API_KEY=XXXXXXXX-XXXX-XXX-XXXX-XXXXXXXXXXX -p 5000:5000 coinapi-cl-ea The adapter endpoint will be accessable from http://localhost/:5000/coinapi-cl-ea","title":"Docker Installation:"},{"location":"chainlink-adapters/coinAPI.io-python-3.x-external-adapter/#sample-job-spec","text":"Chainlink normalises all api parameters to camelcase ( eg assetIdBase will map to asset_id_base in the actual api query) { \"initiators\": [ { \"type\": \"web\", \"params\": { } } ], \"tasks\": [ { \"type\": \"coinapi-cl-ea-docker\", \"confirmations\": 0, \"params\": { \"endpoint\": \"exchangerate\", \"assetIdBase\": \"BTC\", \"assetIdQuote\": \"USD\" } } ], \"startAt\": null, \"endAt\": null","title":"Sample Job Spec"},{"location":"chainlink-adapters/coinAPI.io-python-3.x-external-adapter/#sample-job-spec-result","text":"{ \"id\": \"ceda5ccb18ee4effacacff3a451cfdd3\", \"jobId\": \"c0b6ebcf849b4ca7b7e14c3cc682bf27\", \"result\": { \"jobRunId\": \"ceda5ccb18ee4effacacff3a451cfdd3\", \"data\": { \"assetIdBase\": \"BTC\", \"assetIdQuote\": \"USD\", \"endpoint\": \"exchangerate\", \"rate\": 3440.9833656611113, \"time\": \"2018-12-10T21:48:03.9455953Z\" }, \"status\": \"completed\", \"error\": null }, \"status\": \"completed\", \"taskRuns\": [ { \"id\": \"33ac1506792640579034f6d770b89221\", \"result\": { \"jobRunId\": \"ceda5ccb18ee4effacacff3a451cfdd3\", \"data\": { \"assetIdBase\": \"BTC\", \"assetIdQuote\": \"USD\", \"endpoint\": \"exchangerate\", \"rate\": 3440.9833656611113, \"time\": \"2018-12-10T21:48:03.9455953Z\" }, \"status\": \"completed\", \"error\": null }, \"status\": \"completed\", \"task\": { \"type\": \"coinapi-cl-ea-docker\", \"confirmations\": 0, \"params\": { \"assetIdBase\": \"BTC\", \"assetIdQuote\": \"USD\", \"endpoint\": \"exchangerate\" } }, \"minimumConfirmations\": 0 } ], \"createdAt\": \"2018-12-10T21:48:03.822052017Z\", \"completedAt\": \"2018-12-10T21:48:03.97080798Z\", \"creationHeight\": null, \"observedHeight\": null, \"overrides\": { \"jobRunId\": \"\", \"data\": { }, \"status\": \"\", \"error\": null }, \"initiator\": { \"type\": \"web\", \"params\": {","title":"Sample Job Spec Result"},{"location":"chainlink-adapters/coinAPI.io-python-3.x-external-adapter/#other-examples","text":"test_data.json contains example payloads for all supported endpoints, paths and their parameters. Full documentation for CoinAPI.io API can be found here","title":"Other Examples"},{"location":"chainlink-adapters/coinmarketcap-external-adapter/","text":"Chainlink CoinMarketCap External Adapter Adapter for use on Google Cloud Platform, AWS Lambda or Docker. Upload Zip and use trigger URL as bridge endpoint. Install npm install Create zip: zip -r cl-cmc.zip . Create a cloud function in GCP or Lambda, and set the handler function according to the platform you are using. GCP: gcpservice AWS: handler REMEMBER TO set the environment variable API_KEY to your CoinMarketCap API Key ! Docker docker build . -t cmcadaptor docker run -d \\ --name cmcadaptor \\ -p 80:80 \\ -e PORT=80 \\ -e API_KEY=<YOUR CMC API KEY> \\ cmcadaptor Test Cases (GCP/AWS test events) Fail Event: { \"id\": \"278c97ffadb54a5bbb93cfec5f7b5503\", \"data\": {} } Result: { \"jobRunID\": \"278c97ffadb54a5bbb93cfec5f7b5503\", \"status\": \"errored\", \"error\": \"Not a valid endpoint\" } Pass Event: { \"id\": \"278c97ffadb54a5bbb93cfec5f7b5503\", \"data\": { \"endpoint\": \"cryptocurrency\", \"path\": \"info\", \"symbol\": \"BTC\" } } Result: { \"jobRunID\": \"278c97ffadb54a5bbb93cfec5f7b5503\", \"data\": { \"status\": { \"timestamp\": \"2018-09-05T08:19:35.467Z\", \"error_code\": 0, \"error_message\": null, \"elapsed\": 4, \"credit_count\": 1 }, \"data\": { \"BTC\": { \"urls\": { \"website\": [ \"https://bitcoin.org/\" ], \"twitter\": [], \"reddit\": [ \"https://reddit.com/r/bitcoin\" ], \"message_board\": [ \"https://bitcointalk.org\" ], \"announcement\": [], \"chat\": [], \"explorer\": [ \"https://blockchain.info/\", \"https://live.blockcypher.com/btc/\", \"https://blockchair.com/bitcoin/blocks\" ], \"source_code\": [ \"https://github.com/bitcoin/\" ] }, \"logo\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1.png\", \"id\": 1, \"name\": \"Bitcoin\", \"symbol\": \"BTC\", \"slug\": \"bitcoin\", \"date_added\": \"2013-04-28T00:00:00.000Z\", \"tags\": [ \"mineable\" ], \"category\": \"coin\" } } } } Event: { \"id\": \"278c97ffadb54a5bbb93cfec5f7b5503\", \"data\": { \"endpoint\": \"cryptocurrency\", \"path\": \"map\" } } Event: { \"id\": \"278c97ffadb54a5bbb93cfec5f7b5503\", \"data\": { \"endpoint\": \"cryptocurrency\", \"path\": \"latest\", \"resource\": \"quotes\", \"id\": \"1,2\", \"convert\": \"GBP\" } } Event: { \"id\": \"278c97ffadb54a5bbb93cfec5f7b5503\", \"data\": { \"endpoint\": \"global-metrics\", \"path\": \"latest\", \"resource\": \"quotes\" } }","title":"CoinMarketCap External Adapter"},{"location":"chainlink-adapters/coinmarketcap-external-adapter/#chainlink-coinmarketcap-external-adapter","text":"Adapter for use on Google Cloud Platform, AWS Lambda or Docker. Upload Zip and use trigger URL as bridge endpoint.","title":"Chainlink CoinMarketCap External Adapter"},{"location":"chainlink-adapters/coinmarketcap-external-adapter/#install","text":"npm install Create zip: zip -r cl-cmc.zip . Create a cloud function in GCP or Lambda, and set the handler function according to the platform you are using. GCP: gcpservice AWS: handler REMEMBER TO set the environment variable API_KEY to your CoinMarketCap API Key !","title":"Install"},{"location":"chainlink-adapters/coinmarketcap-external-adapter/#docker","text":"docker build . -t cmcadaptor docker run -d \\ --name cmcadaptor \\ -p 80:80 \\ -e PORT=80 \\ -e API_KEY=<YOUR CMC API KEY> \\ cmcadaptor","title":"Docker"},{"location":"chainlink-adapters/coinmarketcap-external-adapter/#test-cases-gcpaws-test-events","text":"","title":"Test Cases (GCP/AWS test events)"},{"location":"chainlink-adapters/coinmarketcap-external-adapter/#fail","text":"Event: { \"id\": \"278c97ffadb54a5bbb93cfec5f7b5503\", \"data\": {} } Result: { \"jobRunID\": \"278c97ffadb54a5bbb93cfec5f7b5503\", \"status\": \"errored\", \"error\": \"Not a valid endpoint\" }","title":"Fail"},{"location":"chainlink-adapters/coinmarketcap-external-adapter/#pass","text":"Event: { \"id\": \"278c97ffadb54a5bbb93cfec5f7b5503\", \"data\": { \"endpoint\": \"cryptocurrency\", \"path\": \"info\", \"symbol\": \"BTC\" } } Result: { \"jobRunID\": \"278c97ffadb54a5bbb93cfec5f7b5503\", \"data\": { \"status\": { \"timestamp\": \"2018-09-05T08:19:35.467Z\", \"error_code\": 0, \"error_message\": null, \"elapsed\": 4, \"credit_count\": 1 }, \"data\": { \"BTC\": { \"urls\": { \"website\": [ \"https://bitcoin.org/\" ], \"twitter\": [], \"reddit\": [ \"https://reddit.com/r/bitcoin\" ], \"message_board\": [ \"https://bitcointalk.org\" ], \"announcement\": [], \"chat\": [], \"explorer\": [ \"https://blockchain.info/\", \"https://live.blockcypher.com/btc/\", \"https://blockchair.com/bitcoin/blocks\" ], \"source_code\": [ \"https://github.com/bitcoin/\" ] }, \"logo\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1.png\", \"id\": 1, \"name\": \"Bitcoin\", \"symbol\": \"BTC\", \"slug\": \"bitcoin\", \"date_added\": \"2013-04-28T00:00:00.000Z\", \"tags\": [ \"mineable\" ], \"category\": \"coin\" } } } } Event: { \"id\": \"278c97ffadb54a5bbb93cfec5f7b5503\", \"data\": { \"endpoint\": \"cryptocurrency\", \"path\": \"map\" } } Event: { \"id\": \"278c97ffadb54a5bbb93cfec5f7b5503\", \"data\": { \"endpoint\": \"cryptocurrency\", \"path\": \"latest\", \"resource\": \"quotes\", \"id\": \"1,2\", \"convert\": \"GBP\" } } Event: { \"id\": \"278c97ffadb54a5bbb93cfec5f7b5503\", \"data\": { \"endpoint\": \"global-metrics\", \"path\": \"latest\", \"resource\": \"quotes\" } }","title":"Pass"},{"location":"chainlink-adapters/cryptocompare-external-adapter/","text":"Chainlink CryptoCompare External Adapter External adapter for use on Google Cloud Platform or AWS Lambda. Zip and upload, then use trigger URL as bridge endpoint. Input Params endpoint : The endpoint to reach (defaults to price) fsym or coin : The coin to query (required) tsyms or market : The currency to convert to (required) Output Format { \"USD\": 308.88 } Install npm install Test npm test Create zip zip -r cl-cc.zip . Install to AWS Lambda In Lambda Functions, create function On the Create function page: Give the function a name Use Node.js 8.10 for the runtime Choose an existing role or create a new one Click Create Function Under Function code, select \"Upload a .zip file\" from the Code entry type drop-down Click Upload and select the cl-cc.zip file Handler should remain index.handler Add the environment variable: Key: API_KEY Value: Your_API_key Save Install to GCP In Functions, create a new function, choose to ZIP upload Click Browse and select the cl-cc.zip file Select a Storage Bucket to keep the zip in Function to execute: gcpservice Click More, Add variable NAME: API_KEY VALUE: Your_API_key","title":"General JSONRPC External Adapter"},{"location":"chainlink-adapters/cryptocompare-external-adapter/#chainlink-cryptocompare-external-adapter","text":"External adapter for use on Google Cloud Platform or AWS Lambda. Zip and upload, then use trigger URL as bridge endpoint.","title":"Chainlink CryptoCompare External Adapter"},{"location":"chainlink-adapters/cryptocompare-external-adapter/#input-params","text":"endpoint : The endpoint to reach (defaults to price) fsym or coin : The coin to query (required) tsyms or market : The currency to convert to (required)","title":"Input Params"},{"location":"chainlink-adapters/cryptocompare-external-adapter/#output-format","text":"{ \"USD\": 308.88 }","title":"Output Format"},{"location":"chainlink-adapters/cryptocompare-external-adapter/#install","text":"npm install","title":"Install"},{"location":"chainlink-adapters/cryptocompare-external-adapter/#test","text":"npm test","title":"Test"},{"location":"chainlink-adapters/cryptocompare-external-adapter/#create-zip","text":"zip -r cl-cc.zip .","title":"Create zip"},{"location":"chainlink-adapters/cryptocompare-external-adapter/#install-to-aws-lambda","text":"In Lambda Functions, create function On the Create function page: Give the function a name Use Node.js 8.10 for the runtime Choose an existing role or create a new one Click Create Function Under Function code, select \"Upload a .zip file\" from the Code entry type drop-down Click Upload and select the cl-cc.zip file Handler should remain index.handler Add the environment variable: Key: API_KEY Value: Your_API_key Save","title":"Install to AWS Lambda"},{"location":"chainlink-adapters/cryptocompare-external-adapter/#install-to-gcp","text":"In Functions, create a new function, choose to ZIP upload Click Browse and select the cl-cc.zip file Select a Storage Bucket to keep the zip in Function to execute: gcpservice Click More, Add variable NAME: API_KEY VALUE: Your_API_key","title":"Install to GCP"},{"location":"chainlink-adapters/general-JSONRPC-external-adapter/","text":"General JSONRPC External Adapter for Chainlink Should work for any JSON RPC supported endpoint (includes tests for a few major projects which support JSON RPC commands) Supports AWS Lambda and GCP Functions Blockchain clients can sign and send transactions if wallet is unlocked Takes optional connection to RPC endpoint (set via RPC_URL environment variable) A JSON-RPC request is typically formatted like this: { \"jsonrpc\": \"2.0\", \"method\": \"some_method\", \"params\": [ \"some_param\", \"another_param\" ], \"id\": 1 } What this adapter does is allow you to specify the \"method\" and \"params\" values in a Chainlink request and receive the result (format example below) back to the Chainlink node for further processing. { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"some_result\" } In Solidity, a Chainlink request can be made to an external chain for the balance of a given account with the following example: function getBalanceExternalChain(string _account) public onlyOwner { Chainlink.Request memory req = newRequest(JOB_ID, this, this.fulfillRPCCall.selector); req.add(\"method\", \"eth_getBalance\"); string[] memory params = new string[](2); path[0] = _account; path[1] = \"latest\"; req.addStringArray(\"params\", params); chainlinkRequest(req, ORACLE_PAYMENT); } Install Install dependencies npm install Create the zip zip -r cl-jsonrpc.zip . Upload to AWS/GCP Set the RPC_URL environment variable to your client URL. Testing Testing is dependent on the type of node you're connecting to. You can set a local environment variable RPC_URL to point to an RPC connection. Otherwise, the adapter will default to \"http://localhost:8545\" . RPC Address and Port Defaults: - Ethereum: http://localhost:8545 - AION: http://localhost:8545 - BTC: (bitcoind) http://localhost:8332 (btcd) http://localhost:8334 - Zilliqa: http://localhost:4201 For Ethereum and any Geth clone (should work with Parity as well): npm run test:eth For Bitcoin: npm run test:btc For AION: npm run test:aion For Zilliqa: npm run test:zilliqa Install to GCP In Functions, create a new function, choose to ZIP upload Click Browse and select the cl-jsonrpc.zip file Select a Storage Bucket to keep the zip in Function to execute: gcpservice Click More, Add variable NAME: RPC_URL VALUE: Replace_With_Something_Unique Install to AWS Lambda In Lambda Functions, create function On the Create function page: Give the function a name Use Node.js 8.10 for the runtime Choose an existing role or create a new one Click Create Function Under Function code, select \"Upload a .zip file\" from the Code entry type drop-down Click Upload and select the cl-jsonrpc.zip file Handler should remain index.handler Add the environment variable: Key: RPC_URL Value: Replace_With_Something_Unique Save","title":"General JSONRPC External Adapter for Chainlink"},{"location":"chainlink-adapters/general-JSONRPC-external-adapter/#general-jsonrpc-external-adapter-for-chainlink","text":"Should work for any JSON RPC supported endpoint (includes tests for a few major projects which support JSON RPC commands) Supports AWS Lambda and GCP Functions Blockchain clients can sign and send transactions if wallet is unlocked Takes optional connection to RPC endpoint (set via RPC_URL environment variable) A JSON-RPC request is typically formatted like this: { \"jsonrpc\": \"2.0\", \"method\": \"some_method\", \"params\": [ \"some_param\", \"another_param\" ], \"id\": 1 } What this adapter does is allow you to specify the \"method\" and \"params\" values in a Chainlink request and receive the result (format example below) back to the Chainlink node for further processing. { \"id\":1, \"jsonrpc\": \"2.0\", \"result\": \"some_result\" } In Solidity, a Chainlink request can be made to an external chain for the balance of a given account with the following example: function getBalanceExternalChain(string _account) public onlyOwner { Chainlink.Request memory req = newRequest(JOB_ID, this, this.fulfillRPCCall.selector); req.add(\"method\", \"eth_getBalance\"); string[] memory params = new string[](2); path[0] = _account; path[1] = \"latest\"; req.addStringArray(\"params\", params); chainlinkRequest(req, ORACLE_PAYMENT); }","title":"General JSONRPC External Adapter for Chainlink"},{"location":"chainlink-adapters/general-JSONRPC-external-adapter/#install","text":"Install dependencies npm install Create the zip zip -r cl-jsonrpc.zip . Upload to AWS/GCP Set the RPC_URL environment variable to your client URL.","title":"Install"},{"location":"chainlink-adapters/general-JSONRPC-external-adapter/#testing","text":"Testing is dependent on the type of node you're connecting to. You can set a local environment variable RPC_URL to point to an RPC connection. Otherwise, the adapter will default to \"http://localhost:8545\" . RPC Address and Port Defaults: - Ethereum: http://localhost:8545 - AION: http://localhost:8545 - BTC: (bitcoind) http://localhost:8332 (btcd) http://localhost:8334 - Zilliqa: http://localhost:4201 For Ethereum and any Geth clone (should work with Parity as well): npm run test:eth For Bitcoin: npm run test:btc For AION: npm run test:aion For Zilliqa: npm run test:zilliqa","title":"Testing"},{"location":"chainlink-adapters/general-JSONRPC-external-adapter/#install-to-gcp","text":"In Functions, create a new function, choose to ZIP upload Click Browse and select the cl-jsonrpc.zip file Select a Storage Bucket to keep the zip in Function to execute: gcpservice Click More, Add variable NAME: RPC_URL VALUE: Replace_With_Something_Unique","title":"Install to GCP"},{"location":"chainlink-adapters/general-JSONRPC-external-adapter/#install-to-aws-lambda","text":"In Lambda Functions, create function On the Create function page: Give the function a name Use Node.js 8.10 for the runtime Choose an existing role or create a new one Click Create Function Under Function code, select \"Upload a .zip file\" from the Code entry type drop-down Click Upload and select the cl-jsonrpc.zip file Handler should remain index.handler Add the environment variable: Key: RPC_URL Value: Replace_With_Something_Unique Save","title":"Install to AWS Lambda"},{"location":"chainlink-adapters/mistertango-external-adapter/","text":"Mistertango External Adapter How to use Install dependencies npm install Set up Environment variables Optional: Run tests npm test Run createRequest() in one of the following ways: call it directly use the handler() wrapper for AWS Lambda use the gcpservice() wrapper for GCP Use one of the available Available methods Set method name in data.method , along with method-specific parameters To create a ZIP file to upload to AWS/GCP, run: zip -r cl-ea.zip . Environment variables Variable Description Example API_KEY Required API key of the user. See Mistertango Settings e6ab820c-ad73-4f6c-9a39-8978a26b506a API_SECRET Required API secret of the user. See Mistertango Settings 2a8f2e4e3b7e541 API_USERNAME Required Email address of the Mistertango user you@example.com Available methods getBalance Get client balance for current or previous date Request Variable Type Description date String Optional Date for balance (current date, if skipped) Response { \"status\":true, \"api\":{ \"version\":\"string\", \"title\":\"string\" }, \"message\":\"string\", \"data\":{ \"available_balance\":0, \"reservations\":0, \"real_balance\":0 }, \"duration\":0 } getList/getList3 Get transaction list for date or period, newest first, 100 transactions per call Request Variable Type Description dateFrom String Optional Start of period (week ago, if skipped) dateTill String Optional End of period (current date, if skipped) page Integer Optional Page of transaction list in period (1, if skipped) Response { \"status\":true, \"api\":{ \"version\":\"string\", \"title\":\"string\" }, \"message\":\"string\", \"data\":[ { \"total\":0, \"account\":{ \"balance\":0, \"balance_from\":0, \"balance_till\":0, \"incomes\":0, \"expenses\":0 }, \"list\":[ { \"uuid\":\"string\", \"other_side\":\"string\", \"other_side_account\":\"string\", \"direction\":\"string\", \"amount\":0, \"fee\":0, \"comment\":\"string\", \"status\":\"string\", \"date\":\"string\", \"type\":\"string\" } ] } ], \"duration\":0 } sendMoney Send money to IBAN account Request Variable Type Description amount Double Required Amount of money recipient String Required Name of the recipient account String Required IBAN account number or Mistertango username details String Required Details (description) of the transfer Response { \"status\":true, \"api\":{ \"version\":\"string\", \"title\":\"string\" }, \"message\":\"string\", \"data\":\"string\", \"duration\":0 } Disclaimer In order to use this adapter, you will need to create an account with and obtain credentials from Mistertango and agree to and comply with Mistertango\u2019s applicable terms, conditions and policies. In no event will SmartContract Chainlink Limited SEZC be liable for your or your user\u2019s failure to comply with any or all of Mistertango\u2019s terms, conditions or policies or any other applicable license terms.","title":"Mistertango External Adapter"},{"location":"chainlink-adapters/mistertango-external-adapter/#mistertango-external-adapter","text":"","title":"Mistertango External Adapter"},{"location":"chainlink-adapters/mistertango-external-adapter/#how-to-use","text":"Install dependencies npm install Set up Environment variables Optional: Run tests npm test Run createRequest() in one of the following ways: call it directly use the handler() wrapper for AWS Lambda use the gcpservice() wrapper for GCP Use one of the available Available methods Set method name in data.method , along with method-specific parameters To create a ZIP file to upload to AWS/GCP, run: zip -r cl-ea.zip .","title":"How to use"},{"location":"chainlink-adapters/mistertango-external-adapter/#environment-variables","text":"Variable Description Example API_KEY Required API key of the user. See Mistertango Settings e6ab820c-ad73-4f6c-9a39-8978a26b506a API_SECRET Required API secret of the user. See Mistertango Settings 2a8f2e4e3b7e541 API_USERNAME Required Email address of the Mistertango user you@example.com","title":"Environment variables"},{"location":"chainlink-adapters/mistertango-external-adapter/#available-methods","text":"","title":"Available methods"},{"location":"chainlink-adapters/mistertango-external-adapter/#getbalance","text":"Get client balance for current or previous date","title":"getBalance"},{"location":"chainlink-adapters/mistertango-external-adapter/#request","text":"Variable Type Description date String Optional Date for balance (current date, if skipped)","title":"Request"},{"location":"chainlink-adapters/mistertango-external-adapter/#response","text":"{ \"status\":true, \"api\":{ \"version\":\"string\", \"title\":\"string\" }, \"message\":\"string\", \"data\":{ \"available_balance\":0, \"reservations\":0, \"real_balance\":0 }, \"duration\":0 }","title":"Response"},{"location":"chainlink-adapters/mistertango-external-adapter/#getlistgetlist3","text":"Get transaction list for date or period, newest first, 100 transactions per call","title":"getList/getList3"},{"location":"chainlink-adapters/mistertango-external-adapter/#request_1","text":"Variable Type Description dateFrom String Optional Start of period (week ago, if skipped) dateTill String Optional End of period (current date, if skipped) page Integer Optional Page of transaction list in period (1, if skipped)","title":"Request"},{"location":"chainlink-adapters/mistertango-external-adapter/#response_1","text":"{ \"status\":true, \"api\":{ \"version\":\"string\", \"title\":\"string\" }, \"message\":\"string\", \"data\":[ { \"total\":0, \"account\":{ \"balance\":0, \"balance_from\":0, \"balance_till\":0, \"incomes\":0, \"expenses\":0 }, \"list\":[ { \"uuid\":\"string\", \"other_side\":\"string\", \"other_side_account\":\"string\", \"direction\":\"string\", \"amount\":0, \"fee\":0, \"comment\":\"string\", \"status\":\"string\", \"date\":\"string\", \"type\":\"string\" } ] } ], \"duration\":0 }","title":"Response"},{"location":"chainlink-adapters/mistertango-external-adapter/#sendmoney","text":"Send money to IBAN account","title":"sendMoney"},{"location":"chainlink-adapters/mistertango-external-adapter/#request_2","text":"Variable Type Description amount Double Required Amount of money recipient String Required Name of the recipient account String Required IBAN account number or Mistertango username details String Required Details (description) of the transfer","title":"Request"},{"location":"chainlink-adapters/mistertango-external-adapter/#response_2","text":"{ \"status\":true, \"api\":{ \"version\":\"string\", \"title\":\"string\" }, \"message\":\"string\", \"data\":\"string\", \"duration\":0 }","title":"Response"},{"location":"chainlink-adapters/mistertango-external-adapter/#disclaimer","text":"In order to use this adapter, you will need to create an account with and obtain credentials from Mistertango and agree to and comply with Mistertango\u2019s applicable terms, conditions and policies. In no event will SmartContract Chainlink Limited SEZC be liable for your or your user\u2019s failure to comply with any or all of Mistertango\u2019s terms, conditions or policies or any other applicable license terms.","title":"Disclaimer"},{"location":"chainlink-adapters/paypal-external-adapter/","text":"PayPal External Adapter How to use Install dependencies yarn install Build TypeScript files yarn build Set up Environment variables Optional: Run tests yarn test . Please read Testing first! Run this adapter using a serverless provider: use the handler() wrapper for AWS Lambda use the gcpservice() wrapper for GCP Use one of the available Available methods Set method name in data.method , along with method-specific parameters To create a ZIP file to upload to AWS/GCP, run: zip -r cl-ea.zip . Run with Docker docker build . -t paypal-adapter docker run -d \\ -p 8080:8080 \\ -e EA_PORT=8080 \\ -e CLIENT_ID=\"Your_client_id\" \\ -e CLIENT_SECRET=\"Your_client_secret\" \\ paypal-adapter Environment variables Variable Description Example MODE Optional LIVE or SANDBOX SANDBOX CLIENT_ID Required Your PayPal Client ID EBWKjlELKMYqRNQ6sYvFo64FtaRLRR5BdHEESmha49TM CLIENT_SECRET Required Your PayPal Client Secret EO422dn3gQLgDbuwqTjzrFgFtaRLRR5BdHEESmha49TM API_METHOD Optional Set a specific method to use for this adapter. Overwrites method in request body. sendPayout To get PayPal developer credentials, please check out https://developer.paypal.com/. Testing Before you start testing, make sure you have necessary PayPal developer credentials set up. Set the MODE env variable to sandbox . In order to test sending payouts, make sure your facilitator account is funded. Also make sure you are sending in the default currency of your account. Receiver should be your \"buyer\" account. These env vars can be set with TEST_CURRENCY and TEST_RECEIVER , as well as TEST_AMOUNT . To test the getPayout method with another payout other than the one created in the test, set the TEST_PAYOUT_ID env var. Available methods Method can be specified by the method key in the request body or the API_METHOD environment variable. If the environment variable is set, it takes precedence over the method specified in the request body. sendPayout Send a payout with the Payouts API. Request Variable Type Description amount Integer, decimal Required Amount to send. Please refer to the PayPal docs . currency String Optional Three-character ISO-4217 currency code. Defaults to USD . Please refer to the full list of available currencies . receiver String Required Receiver of the payout recipient_type String Optional The type of receiver . Can be one of EMAIL , PHONE and PAYPAL_ID . Defaults to EMAIL . note String Optional Custom note for this payout sender_item_id String Optional Custom sender-specified ID for this payout email_subject String Optional Custom email subject for the payment notification email_message String Optional Custom email message for the payment notification Please refer to the PayPal docs for more information on each parameter: https://developer.paypal.com/docs/api/payments.payouts-batch/v1/#payouts_create Response { \"result\":\"5UXD2E8A7EBQJ\", \"batch_header\":{ \"sender_batch_header\":{ \"sender_batch_id\":\"Payouts_2018_100008\", \"email_subject\":\"You have a payout!\", \"email_message\":\"You have received a payout! Thanks for using our service!\" }, \"payout_batch_id\":\"5UXD2E8A7EBQJ\", \"batch_status\":\"PENDING\" } } getPayout Get details on a payout. Request Variable Type Description type String Optional Type of payout to look up. One of ITEM and BATCH . Defaults to BATCH . payout_id String Required Payout item ID to look up Please refer to the PayPal docs for more information on each parameter: https://developer.paypal.com/docs/api/payments.payouts-batch/v1/#payouts_create Response { \"result\":\"5UXD2E8A7EBQJ\", \"batch_header\":{ \"sender_batch_header\":{ \"sender_batch_id\":\"Payouts_2018_100008\", \"email_subject\":\"You have a payout!\", \"email_message\":\"You have received a payout! Thanks for using our service!\" }, \"payout_batch_id\":\"5UXD2E8A7EBQJ\", \"batch_status\":\"PENDING\" } } Disclaimer In order to use this adapter, you will need to create an account with and obtain credentials from PayPal and agree to and comply with PayPal\u2019s applicable terms, conditions and policies. In no event will SmartContract Chainlink Limited SEZC be liable for your or your user\u2019s failure to comply with any or all of PayPal\u2019s terms, conditions or policies or any other applicable license terms.","title":"PayPal External Adapter"},{"location":"chainlink-adapters/paypal-external-adapter/#paypal-external-adapter","text":"","title":"PayPal External Adapter"},{"location":"chainlink-adapters/paypal-external-adapter/#how-to-use","text":"Install dependencies yarn install Build TypeScript files yarn build Set up Environment variables Optional: Run tests yarn test . Please read Testing first! Run this adapter using a serverless provider: use the handler() wrapper for AWS Lambda use the gcpservice() wrapper for GCP Use one of the available Available methods Set method name in data.method , along with method-specific parameters To create a ZIP file to upload to AWS/GCP, run: zip -r cl-ea.zip .","title":"How to use"},{"location":"chainlink-adapters/paypal-external-adapter/#run-with-docker","text":"docker build . -t paypal-adapter docker run -d \\ -p 8080:8080 \\ -e EA_PORT=8080 \\ -e CLIENT_ID=\"Your_client_id\" \\ -e CLIENT_SECRET=\"Your_client_secret\" \\ paypal-adapter","title":"Run with Docker"},{"location":"chainlink-adapters/paypal-external-adapter/#environment-variables","text":"Variable Description Example MODE Optional LIVE or SANDBOX SANDBOX CLIENT_ID Required Your PayPal Client ID EBWKjlELKMYqRNQ6sYvFo64FtaRLRR5BdHEESmha49TM CLIENT_SECRET Required Your PayPal Client Secret EO422dn3gQLgDbuwqTjzrFgFtaRLRR5BdHEESmha49TM API_METHOD Optional Set a specific method to use for this adapter. Overwrites method in request body. sendPayout To get PayPal developer credentials, please check out https://developer.paypal.com/.","title":"Environment variables"},{"location":"chainlink-adapters/paypal-external-adapter/#testing","text":"Before you start testing, make sure you have necessary PayPal developer credentials set up. Set the MODE env variable to sandbox . In order to test sending payouts, make sure your facilitator account is funded. Also make sure you are sending in the default currency of your account. Receiver should be your \"buyer\" account. These env vars can be set with TEST_CURRENCY and TEST_RECEIVER , as well as TEST_AMOUNT . To test the getPayout method with another payout other than the one created in the test, set the TEST_PAYOUT_ID env var.","title":"Testing"},{"location":"chainlink-adapters/paypal-external-adapter/#available-methods","text":"Method can be specified by the method key in the request body or the API_METHOD environment variable. If the environment variable is set, it takes precedence over the method specified in the request body.","title":"Available methods"},{"location":"chainlink-adapters/paypal-external-adapter/#sendpayout","text":"Send a payout with the Payouts API.","title":"sendPayout"},{"location":"chainlink-adapters/paypal-external-adapter/#request","text":"Variable Type Description amount Integer, decimal Required Amount to send. Please refer to the PayPal docs . currency String Optional Three-character ISO-4217 currency code. Defaults to USD . Please refer to the full list of available currencies . receiver String Required Receiver of the payout recipient_type String Optional The type of receiver . Can be one of EMAIL , PHONE and PAYPAL_ID . Defaults to EMAIL . note String Optional Custom note for this payout sender_item_id String Optional Custom sender-specified ID for this payout email_subject String Optional Custom email subject for the payment notification email_message String Optional Custom email message for the payment notification Please refer to the PayPal docs for more information on each parameter: https://developer.paypal.com/docs/api/payments.payouts-batch/v1/#payouts_create","title":"Request"},{"location":"chainlink-adapters/paypal-external-adapter/#response","text":"{ \"result\":\"5UXD2E8A7EBQJ\", \"batch_header\":{ \"sender_batch_header\":{ \"sender_batch_id\":\"Payouts_2018_100008\", \"email_subject\":\"You have a payout!\", \"email_message\":\"You have received a payout! Thanks for using our service!\" }, \"payout_batch_id\":\"5UXD2E8A7EBQJ\", \"batch_status\":\"PENDING\" } }","title":"Response"},{"location":"chainlink-adapters/paypal-external-adapter/#getpayout","text":"Get details on a payout.","title":"getPayout"},{"location":"chainlink-adapters/paypal-external-adapter/#request_1","text":"Variable Type Description type String Optional Type of payout to look up. One of ITEM and BATCH . Defaults to BATCH . payout_id String Required Payout item ID to look up Please refer to the PayPal docs for more information on each parameter: https://developer.paypal.com/docs/api/payments.payouts-batch/v1/#payouts_create","title":"Request"},{"location":"chainlink-adapters/paypal-external-adapter/#response_1","text":"{ \"result\":\"5UXD2E8A7EBQJ\", \"batch_header\":{ \"sender_batch_header\":{ \"sender_batch_id\":\"Payouts_2018_100008\", \"email_subject\":\"You have a payout!\", \"email_message\":\"You have received a payout! Thanks for using our service!\" }, \"payout_batch_id\":\"5UXD2E8A7EBQJ\", \"batch_status\":\"PENDING\" } }","title":"Response"},{"location":"chainlink-adapters/paypal-external-adapter/#disclaimer","text":"In order to use this adapter, you will need to create an account with and obtain credentials from PayPal and agree to and comply with PayPal\u2019s applicable terms, conditions and policies. In no event will SmartContract Chainlink Limited SEZC be liable for your or your user\u2019s failure to comply with any or all of PayPal\u2019s terms, conditions or policies or any other applicable license terms.","title":"Disclaimer"},{"location":"chainlink-adapters/secure-data-links-open-weather-adaptor/","text":"Secure Data Links Open Weather Adaptor This adaptor allows nodes to support the Open Weather API (https://openweathermap.org/api). It was built using the Chainlink NodeJS Template available at https://github.com/thodges-gh/CL-EA-NodeJS-Template. Setup Install and Zip npm install zip -r open-weather-ea.zip Docker docker build . -t openweatheradaptor docker run --name openweatheradaptor -p 5000:80 -e PORT=80 -e API_KEY=<YOUR_API_KEY> openweatheradaptor This will run the adapter at http://localhost:5000. Install to AWS Lambda In Lambda Functions, create function On the Create function page: Give the function a name Use Node.js 8.10 for the runtime Choose an existing role or create a new one Click Create Function Under Function code, select \"Upload a .zip file\" from the Code entry type drop-down Click Upload and select the open-weather-ea.zip file Handler should remain index.handler Add the environment variable (repeat for all environment variables): Key: API_KEY Value: Your_API_key Save Install to GCP In Functions, create a new function, choose to ZIP upload Click Browse and select the open-weather-ea.zip file Select a Storage Bucket to keep the zip in Function to execute: gcpservice Click More, Add variable (repeat for all environment variables) NAME: API_KEY VALUE: Your_API_key Parameters The following API endpoints are supported with the related parameters. Note CityId is a ID specific to the Open Weather API. To Find the CityID for any city, visit http://bulk.openweathermap.org/sample/city.list.json.gz Current Weather Data Endpoint: weather Params CityId: The City ID to get data for Forcasted Weather Data Endpoint: forecast Params CityId: The City ID to get data for Days: The number of days to get data for (up to 5 days) The following premium API endpoints are also supported Forcasted Weather Data (Hourly) Endpoint: forecast/hourly Params CityId: The City ID to get data for Days: The number of days to get data for (up to 4 days) Forcasted Weather Data (16 Days) Endpoint: forecast/daily Params CityId: The City ID to get data for Days: The number of days to get data for (up to 16 days) Climate Forecast Weather Data (Month) Endpoint: climate/monthly Params CityId: The City ID to get data for Testing API_KEY=<YOUR_API_KEY> npm test","title":"Secure Data Links Open Weather Adaptor"},{"location":"chainlink-adapters/secure-data-links-open-weather-adaptor/#secure-data-links-open-weather-adaptor","text":"This adaptor allows nodes to support the Open Weather API (https://openweathermap.org/api). It was built using the Chainlink NodeJS Template available at https://github.com/thodges-gh/CL-EA-NodeJS-Template.","title":"Secure Data Links Open Weather Adaptor"},{"location":"chainlink-adapters/secure-data-links-open-weather-adaptor/#setup","text":"","title":"Setup"},{"location":"chainlink-adapters/secure-data-links-open-weather-adaptor/#install-and-zip","text":"npm install zip -r open-weather-ea.zip","title":"Install and Zip"},{"location":"chainlink-adapters/secure-data-links-open-weather-adaptor/#docker","text":"docker build . -t openweatheradaptor docker run --name openweatheradaptor -p 5000:80 -e PORT=80 -e API_KEY=<YOUR_API_KEY> openweatheradaptor This will run the adapter at http://localhost:5000.","title":"Docker"},{"location":"chainlink-adapters/secure-data-links-open-weather-adaptor/#install-to-aws-lambda","text":"In Lambda Functions, create function On the Create function page: Give the function a name Use Node.js 8.10 for the runtime Choose an existing role or create a new one Click Create Function Under Function code, select \"Upload a .zip file\" from the Code entry type drop-down Click Upload and select the open-weather-ea.zip file Handler should remain index.handler Add the environment variable (repeat for all environment variables): Key: API_KEY Value: Your_API_key Save","title":"Install to AWS Lambda"},{"location":"chainlink-adapters/secure-data-links-open-weather-adaptor/#install-to-gcp","text":"In Functions, create a new function, choose to ZIP upload Click Browse and select the open-weather-ea.zip file Select a Storage Bucket to keep the zip in Function to execute: gcpservice Click More, Add variable (repeat for all environment variables) NAME: API_KEY VALUE: Your_API_key","title":"Install to GCP"},{"location":"chainlink-adapters/secure-data-links-open-weather-adaptor/#parameters","text":"The following API endpoints are supported with the related parameters. Note CityId is a ID specific to the Open Weather API. To Find the CityID for any city, visit http://bulk.openweathermap.org/sample/city.list.json.gz Current Weather Data Endpoint: weather Params CityId: The City ID to get data for Forcasted Weather Data Endpoint: forecast Params CityId: The City ID to get data for Days: The number of days to get data for (up to 5 days) The following premium API endpoints are also supported Forcasted Weather Data (Hourly) Endpoint: forecast/hourly Params CityId: The City ID to get data for Days: The number of days to get data for (up to 4 days) Forcasted Weather Data (16 Days) Endpoint: forecast/daily Params CityId: The City ID to get data for Days: The number of days to get data for (up to 16 days) Climate Forecast Weather Data (Month) Endpoint: climate/monthly Params CityId: The City ID to get data for","title":"Parameters"},{"location":"chainlink-adapters/secure-data-links-open-weather-adaptor/#testing","text":"API_KEY=<YOUR_API_KEY> npm test","title":"Testing"}]}